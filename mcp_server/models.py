# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:08:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(RootModel[constr(pattern=r'.*', min_length=1, max_length=1600)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1600)


class AggregateType(Enum):
    AVERAGE = 'AVERAGE'
    COUNT = 'COUNT'
    MAXIMUM = 'MAXIMUM'
    MINIMUM = 'MINIMUM'
    SUM = 'SUM'
    STANDARD_DEVIATION = 'STANDARD_DEVIATION'


class AggregateTypes(RootModel[List[AggregateType]]):
    root: List[AggregateType] = Field(..., min_length=1)


class AggregatedDoubleValue(RootModel[float]):
    root: float


class Aggregates(BaseModel):
    average: Optional[AggregatedDoubleValue] = None
    count: Optional[AggregatedDoubleValue] = None
    maximum: Optional[AggregatedDoubleValue] = None
    minimum: Optional[AggregatedDoubleValue] = None
    standardDeviation: Optional[AggregatedDoubleValue] = None
    sum: Optional[AggregatedDoubleValue] = None


class Alarms(BaseModel):
    alarmRoleArn: ARN
    notificationLambdaArn: Optional[ARN] = None


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class AssetErrorCode(Enum):
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'


class AssetErrorMessage(RootModel[str]):
    root: str


class AssetModelState(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    PROPAGATING = 'PROPAGATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class AssetPropertyAlias(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)


class AssetRelationshipType(Enum):
    HIERARCHY = 'HIERARCHY'


class AssetState(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class AuthMode(Enum):
    IAM = 'IAM'
    SSO = 'SSO'


class BatchEntryCompletionStatus(Enum):
    SUCCESS = 'SUCCESS'
    ERROR = 'ERROR'


class BatchGetAssetPropertyAggregatesErrorCode(Enum):
    ResourceNotFoundException = 'ResourceNotFoundException'
    InvalidRequestException = 'InvalidRequestException'
    AccessDeniedException = 'AccessDeniedException'


class BatchGetAssetPropertyAggregatesMaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class BatchGetAssetPropertyValueErrorCode(Enum):
    ResourceNotFoundException = 'ResourceNotFoundException'
    InvalidRequestException = 'InvalidRequestException'
    AccessDeniedException = 'AccessDeniedException'


class BatchGetAssetPropertyValueHistoryErrorCode(Enum):
    ResourceNotFoundException = 'ResourceNotFoundException'
    InvalidRequestException = 'InvalidRequestException'
    AccessDeniedException = 'AccessDeniedException'


class BatchGetAssetPropertyValueHistoryMaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class BatchPutAssetPropertyValueErrorCode(Enum):
    ResourceNotFoundException = 'ResourceNotFoundException'
    InvalidRequestException = 'InvalidRequestException'
    InternalFailureException = 'InternalFailureException'
    ServiceUnavailableException = 'ServiceUnavailableException'
    ThrottlingException = 'ThrottlingException'
    LimitExceededException = 'LimitExceededException'
    ConflictingOperationException = 'ConflictingOperationException'
    TimestampOutOfRangeException = 'TimestampOutOfRangeException'
    AccessDeniedException = 'AccessDeniedException'


class Bucket(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class CapabilityConfiguration(RootModel[constr(min_length=1, max_length=104857600)]):
    root: constr(min_length=1, max_length=104857600)


class CapabilityNamespace(
    RootModel[
        constr(pattern=r'^[a-zA-Z]+:[a-zA-Z]+:[0-9]+$', min_length=1, max_length=512)
    ]
):
    root: constr(pattern=r'^[a-zA-Z]+:[a-zA-Z]+:[0-9]+$', min_length=1, max_length=512)


class CapabilitySyncStatus(Enum):
    IN_SYNC = 'IN_SYNC'
    OUT_OF_SYNC = 'OUT_OF_SYNC'
    SYNC_FAILED = 'SYNC_FAILED'
    UNKNOWN = 'UNKNOWN'


class ClientToken(
    RootModel[constr(pattern=r'\S{36,64}', min_length=36, max_length=64)]
):
    root: constr(pattern=r'\S{36,64}', min_length=36, max_length=64)


class ColumnName(Enum):
    ALIAS = 'ALIAS'
    ASSET_ID = 'ASSET_ID'
    PROPERTY_ID = 'PROPERTY_ID'
    DATA_TYPE = 'DATA_TYPE'
    TIMESTAMP_SECONDS = 'TIMESTAMP_SECONDS'
    TIMESTAMP_NANO_OFFSET = 'TIMESTAMP_NANO_OFFSET'
    QUALITY = 'QUALITY'
    VALUE = 'VALUE'


class ColumnNames(RootModel[List[ColumnName]]):
    root: List[ColumnName]


class ComputeLocation(Enum):
    EDGE = 'EDGE'
    CLOUD = 'CLOUD'


class ConfigurationState(Enum):
    ACTIVE = 'ACTIVE'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class ConflictingOperationException(RootModel[Any]):
    root: Any


class CoreDeviceThingName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class Csv(BaseModel):
    columnNames: Optional[ColumnNames] = None


class CustomerManagedS3Storage(BaseModel):
    roleArn: ARN
    s3ResourceArn: ARN


class DashboardDefinition(
    RootModel[constr(pattern=r'.+', min_length=0, max_length=204800)]
):
    root: constr(pattern=r'.+', min_length=0, max_length=204800)


class DefaultValue(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=1024)


class DeleteAccessPolicyRequest(BaseModel):
    pass


class DeleteAccessPolicyResponse(BaseModel):
    pass


class DeleteAssetModelRequest(BaseModel):
    pass


class DeleteAssetRequest(BaseModel):
    pass


class DeleteDashboardRequest(BaseModel):
    pass


class DeleteDashboardResponse(BaseModel):
    pass


class DeleteGatewayRequest(BaseModel):
    pass


class DeletePortalRequest(BaseModel):
    pass


class DeleteProjectRequest(BaseModel):
    pass


class DeleteProjectResponse(BaseModel):
    pass


class DeleteTimeSeriesRequest(BaseModel):
    clientToken: Optional[ClientToken] = None


class DescribeAccessPolicyRequest(BaseModel):
    pass


class DescribeAssetModelRequest(BaseModel):
    pass


class DescribeAssetPropertyRequest(BaseModel):
    pass


class DescribeAssetRequest(BaseModel):
    pass


class DescribeBulkImportJobRequest(BaseModel):
    pass


class DescribeDashboardRequest(BaseModel):
    pass


class DescribeDefaultEncryptionConfigurationRequest(BaseModel):
    pass


class DescribeGatewayCapabilityConfigurationRequest(BaseModel):
    pass


class DescribeGatewayRequest(BaseModel):
    pass


class DescribeLoggingOptionsRequest(BaseModel):
    pass


class DescribePortalRequest(BaseModel):
    pass


class DescribeProjectRequest(BaseModel):
    pass


class DescribeStorageConfigurationRequest(BaseModel):
    pass


class DescribeTimeSeriesRequest(BaseModel):
    pass


class Description(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)


class DetailedErrorCode(Enum):
    INCOMPATIBLE_COMPUTE_LOCATION = 'INCOMPATIBLE_COMPUTE_LOCATION'
    INCOMPATIBLE_FORWARDING_CONFIGURATION = 'INCOMPATIBLE_FORWARDING_CONFIGURATION'


class DetailedErrorMessage(RootModel[str]):
    root: str


class DisassociateTimeSeriesFromAssetPropertyRequest(BaseModel):
    clientToken: Optional[ClientToken] = None


class DisassociatedDataStorageState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Email(RootModel[constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255)]):
    root: constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255)


class EncryptionType(Enum):
    SITEWISE_DEFAULT_ENCRYPTION = 'SITEWISE_DEFAULT_ENCRYPTION'
    KMS_BASED_ENCRYPTION = 'KMS_BASED_ENCRYPTION'


class EntryId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64)


class ErrorCode(Enum):
    VALIDATION_ERROR = 'VALIDATION_ERROR'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'


class ErrorMessage(RootModel[str]):
    root: str


class ExcludeProperties(RootModel[bool]):
    root: bool


class Expression(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class FileFormat(BaseModel):
    csv: Optional[Csv] = None


class ForwardingConfigState(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class GatewayCapabilitySummary(BaseModel):
    capabilityNamespace: CapabilityNamespace
    capabilitySyncStatus: CapabilitySyncStatus


class GetAssetPropertyAggregatesRequest(BaseModel):
    pass


class GetAssetPropertyValueHistoryRequest(BaseModel):
    pass


class GetAssetPropertyValueRequest(BaseModel):
    pass


class GetInterpolatedAssetPropertyValuesRequest(BaseModel):
    pass


class Greengrass(BaseModel):
    groupArn: ARN


class GreengrassV2(BaseModel):
    coreDeviceThingName: CoreDeviceThingName


class IAMRoleIdentity(BaseModel):
    arn: ARN


class IAMUserIdentity(BaseModel):
    arn: ARN


class ID(
    RootModel[
        constr(
            pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    )


class IDs(RootModel[List[ID]]):
    root: List[ID] = Field(..., max_length=100, min_length=1)


class IdentityId(RootModel[constr(pattern=r'\S+', min_length=1, max_length=256)]):
    root: constr(pattern=r'\S+', min_length=1, max_length=256)


class IdentityType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'
    IAM = 'IAM'


class ImageFileData(RootModel[constr(min_length=1, max_length=1500000)]):
    root: constr(min_length=1, max_length=1500000)


class ImageFileType(Enum):
    PNG = 'PNG'


class InternalFailureException(RootModel[Any]):
    root: Any


class InterpolationType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Interval(RootModel[constr(min_length=2, max_length=23)]):
    root: constr(min_length=2, max_length=23)


class IntervalInSeconds(RootModel[conint(ge=1, le=320000000)]):
    root: conint(ge=1, le=320000000)


class IntervalWindowInSeconds(RootModel[conint(ge=1, le=320000000)]):
    root: conint(ge=1, le=320000000)


class InvalidRequestException(RootModel[Any]):
    root: Any


class JobConfiguration(BaseModel):
    fileFormat: FileFormat


class JobStatus(Enum):
    PENDING = 'PENDING'
    CANCELLED = 'CANCELLED'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    COMPLETED_WITH_FAILURES = 'COMPLETED_WITH_FAILURES'


class KmsKeyId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListAccessPoliciesRequest(BaseModel):
    pass


class ListAssetModelPropertiesFilter(Enum):
    ALL = 'ALL'
    BASE = 'BASE'


class ListAssetModelPropertiesRequest(BaseModel):
    pass


class ListAssetModelsRequest(BaseModel):
    pass


class ListAssetPropertiesFilter(Enum):
    ALL = 'ALL'
    BASE = 'BASE'


class ListAssetPropertiesRequest(BaseModel):
    pass


class ListAssetRelationshipsRequest(BaseModel):
    pass


class ListAssetsFilter(Enum):
    ALL = 'ALL'
    TOP_LEVEL = 'TOP_LEVEL'


class ListAssetsRequest(BaseModel):
    pass


class ListAssociatedAssetsRequest(BaseModel):
    pass


class ListBulkImportJobsFilter(Enum):
    ALL = 'ALL'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    COMPLETED_WITH_FAILURES = 'COMPLETED_WITH_FAILURES'
    COMPLETED = 'COMPLETED'


class ListBulkImportJobsRequest(BaseModel):
    pass


class ListDashboardsRequest(BaseModel):
    pass


class ListGatewaysRequest(BaseModel):
    pass


class ListPortalsRequest(BaseModel):
    pass


class ListProjectAssetsRequest(BaseModel):
    pass


class ListProjectsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTimeSeriesRequest(BaseModel):
    pass


class ListTimeSeriesType(Enum):
    ASSOCIATED = 'ASSOCIATED'
    DISASSOCIATED = 'DISASSOCIATED'


class LoggingLevel(Enum):
    ERROR = 'ERROR'
    INFO = 'INFO'
    OFF = 'OFF'


class LoggingOptions(BaseModel):
    level: LoggingLevel


class Macro(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)


class MaxInterpolatedResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class MetricProcessingConfig(BaseModel):
    computeLocation: ComputeLocation


class MonitorErrorCode(Enum):
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    VALIDATION_ERROR = 'VALIDATION_ERROR'
    LIMIT_EXCEEDED = 'LIMIT_EXCEEDED'


class MonitorErrorMessage(RootModel[str]):
    root: str


class MultiLayerStorage(BaseModel):
    customerManagedS3Storage: CustomerManagedS3Storage


class Name(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)


class NextToken(
    RootModel[constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=4096)


class NumberOfDays(RootModel[conint(ge=30)]):
    root: conint(ge=30)


class Offset(RootModel[constr(min_length=2, max_length=25)]):
    root: constr(min_length=2, max_length=25)


class OffsetInNanos(RootModel[conint(ge=0, le=999999999)]):
    root: conint(ge=0, le=999999999)


class Permission(Enum):
    ADMINISTRATOR = 'ADMINISTRATOR'
    VIEWER = 'VIEWER'


class PortalClientId(
    RootModel[constr(pattern=r'^[!-~]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[!-~]*', min_length=1, max_length=256)


class PortalResource(BaseModel):
    id: ID


class PortalState(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'


class ProjectResource(BaseModel):
    id: ID


class PropertyAlias(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1)


class PropertyDataType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    DOUBLE = 'DOUBLE'
    BOOLEAN = 'BOOLEAN'
    STRUCT = 'STRUCT'


class PropertyNotificationState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class PropertyNotificationTopic(RootModel[str]):
    root: str


class PropertyUnit(
    RootModel[constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)


class PropertyValueBooleanValue(RootModel[bool]):
    root: bool


class PropertyValueDoubleValue(RootModel[float]):
    root: float


class PropertyValueIntegerValue(RootModel[int]):
    root: int


class PropertyValueStringValue(RootModel[str]):
    root: str


class PutDefaultEncryptionConfigurationRequest(BaseModel):
    encryptionType: EncryptionType
    kmsKeyId: Optional[KmsKeyId] = None


class PutLoggingOptionsRequest(BaseModel):
    loggingOptions: LoggingOptions


class PutLoggingOptionsResponse(BaseModel):
    pass


class Quality(Enum):
    GOOD = 'GOOD'
    BAD = 'BAD'
    UNCERTAIN = 'UNCERTAIN'


class Resolution(RootModel[constr(pattern=r'1m|1h|1d', min_length=2, max_length=2)]):
    root: constr(pattern=r'1m|1h|1d', min_length=2, max_length=2)


class Resource(BaseModel):
    portal: Optional[PortalResource] = None
    project: Optional[ProjectResource] = None


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    PORTAL = 'PORTAL'
    PROJECT = 'PROJECT'


class SSOApplicationId(
    RootModel[constr(pattern=r'^[!-~]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[!-~]*', min_length=1, max_length=64)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StorageType(Enum):
    SITEWISE_DEFAULT_STORAGE = 'SITEWISE_DEFAULT_STORAGE'
    MULTI_LAYER_STORAGE = 'MULTI_LAYER_STORAGE'


class String(RootModel[str]):
    root: str


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class TimeInSeconds(RootModel[conint(ge=1, le=9223372036854774)]):
    root: conint(ge=1, le=9223372036854774)


class TimeOrdering(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class TimeSeriesId(RootModel[constr(min_length=36, max_length=73)]):
    root: constr(min_length=36, max_length=73)


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyTagsException(RootModel[Any]):
    root: Any


class TraversalDirection(Enum):
    PARENT = 'PARENT'
    CHILD = 'CHILD'


class TraversalType(Enum):
    PATH_TO_ROOT = 'PATH_TO_ROOT'


class TumblingWindow(BaseModel):
    interval: Interval
    offset: Optional[Offset] = None


class UnauthorizedException(RootModel[Any]):
    root: Any


class Unlimited(RootModel[bool]):
    root: bool


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateAccessPolicyResponse(BaseModel):
    pass


class UpdateAssetPropertyRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    propertyAlias: Optional[PropertyAlias] = None
    propertyNotificationState: Optional[PropertyNotificationState] = None
    propertyUnit: Optional[PropertyUnit] = None


class UpdateAssetRequest(BaseModel):
    assetDescription: Optional[Description] = None
    assetName: Name
    clientToken: Optional[ClientToken] = None


class UpdateDashboardRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    dashboardDefinition: DashboardDefinition
    dashboardDescription: Optional[Description] = None
    dashboardName: Name


class UpdateDashboardResponse(BaseModel):
    pass


class UpdateGatewayCapabilityConfigurationRequest(BaseModel):
    capabilityConfiguration: CapabilityConfiguration
    capabilityNamespace: CapabilityNamespace


class UpdateGatewayCapabilityConfigurationResponse(BaseModel):
    capabilityNamespace: CapabilityNamespace
    capabilitySyncStatus: CapabilitySyncStatus


class UpdateGatewayRequest(BaseModel):
    gatewayName: Name


class UpdateProjectRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    projectDescription: Optional[Description] = None
    projectName: Name


class UpdateProjectResponse(BaseModel):
    pass


class Url(
    RootModel[constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=256)


class UserIdentity(BaseModel):
    id: IdentityId


class VariableName(
    RootModel[constr(pattern=r'^[a-z][a-z0-9_]*$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-z][a-z0-9_]*$', min_length=1, max_length=64)


class VariableValue(BaseModel):
    hierarchyId: Optional[Macro] = None
    propertyId: Macro


class Variant(BaseModel):
    booleanValue: Optional[PropertyValueBooleanValue] = None
    doubleValue: Optional[PropertyValueDoubleValue] = None
    integerValue: Optional[PropertyValueIntegerValue] = None
    stringValue: Optional[PropertyValueStringValue] = None


class GatewayPlatform(BaseModel):
    greengrass: Optional[Greengrass] = None
    greengrassV2: Optional[GreengrassV2] = None


class Field20200301GatewaysPostRequest(BaseModel):
    gatewayName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A unique, friendly name for the gateway.')
    gatewayPlatform: GatewayPlatform = Field(
        ..., description="Contains a gateway's platform information."
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the gateway. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class Field20200301GatewaysGatewayIdPutRequest(BaseModel):
    gatewayName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A unique, friendly name for the gateway.')


class Field20200301GatewaysGatewayIdCapabilityPostRequest(BaseModel):
    capabilityConfiguration: constr(min_length=1, max_length=104857600) = Field(
        ...,
        description='The JSON document that defines the configuration for the gateway capability. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/configure-sources.html#configure-source-cli">Configuring data sources (CLI)</a> in the <i>IoT SiteWise User Guide</i>.',
    )
    capabilityNamespace: constr(
        pattern=r'^[a-zA-Z]+:[a-zA-Z]+:[0-9]+$', min_length=1, max_length=512
    ) = Field(
        ...,
        description='The namespace of the gateway capability configuration to be updated. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace <code>iotsitewise:opcuacollector:version</code>, where <code>version</code> is a number such as <code>1</code>.',
    )


class AccessPolicyPermission(Enum):
    ADMINISTRATOR = 'ADMINISTRATOR'
    VIEWER = 'VIEWER'


class AccessPolicyResource(BaseModel):
    portal: Optional[PortalResource] = None
    project: Optional[ProjectResource] = None


class Filter(Enum):
    ALL = 'ALL'
    BASE = 'BASE'


class Filter2(Enum):
    ALL = 'ALL'
    TOP_LEVEL = 'TOP_LEVEL'


class AssetsPostRequest(BaseModel):
    assetDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the asset.')
    assetModelId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(
        ..., description='The ID of the asset model from which to create the asset.'
    )
    assetName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A friendly name for the asset.')
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the asset. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class AssetsAssetIdPutRequest(BaseModel):
    assetDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the asset.')
    assetName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A friendly name for the asset.')
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class AssetsAssetIdAssociatePostRequest(BaseModel):
    childAssetId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(..., description='The ID of the child asset to be associated.')
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    hierarchyId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(
        ...,
        description='The ID of a hierarchy in the parent asset\'s model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class AssetsAssetIdDisassociatePostRequest(BaseModel):
    childAssetId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(..., description='The ID of the child asset to disassociate.')
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    hierarchyId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(
        ...,
        description='The ID of a hierarchy in the parent asset\'s model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class Filter4(Enum):
    ALL = 'ALL'
    BASE = 'BASE'


class AssetsAssetIdPropertiesPropertyIdPutRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    propertyAlias: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1)
    ] = Field(
        None,
        description='<p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the alias is removed from the property.</p>',
    )
    propertyNotificationState: Optional[PropertyNotificationState] = Field(
        None,
        description='<p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>',
    )
    propertyUnit: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description="The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.",
    )


class ConfigurationAccountEncryptionPostRequest(BaseModel):
    encryptionType: EncryptionType = Field(
        ..., description='The type of encryption used for the encryption configuration.'
    )
    kmsKeyId: Optional[constr(min_length=1, max_length=2048)] = Field(
        None,
        description='The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>.',
    )


class DisassociatedDataStorage(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class MultiLayerStorage1(BaseModel):
    customerManagedS3Storage: Optional[CustomerManagedS3Storage] = None


class RetentionPeriod(BaseModel):
    numberOfDays: Optional[NumberOfDays] = None
    unlimited: Optional[Unlimited] = None


class ConfigurationAccountStoragePostRequest(BaseModel):
    disassociatedDataStorage: Optional[DisassociatedDataStorage] = Field(
        None,
        description='<p>Contains the storage configuration for time series (data streams) that aren\'t associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren\'t associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can\'t disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn\'t accept time series (data streams) that aren\'t associated with asset properties.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>',
    )
    multiLayerStorage: Optional[MultiLayerStorage1] = Field(
        None, description='Contains information about the storage destination.'
    )
    retentionPeriod: Optional[RetentionPeriod] = Field(
        None,
        description='How many days your data is kept in the hot tier. By default, your data is kept indefinitely in the hot tier.',
    )
    storageType: StorageType = Field(
        ...,
        description='<p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>',
    )


class DashboardsPostRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    dashboardDefinition: constr(pattern=r'.+', min_length=0, max_length=204800) = Field(
        ...,
        description='The dashboard definition specified in a JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.',
    )
    dashboardDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the dashboard.')
    dashboardName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A friendly name for the dashboard.')
    projectId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(
        ..., description='The ID of the project in which to create the dashboard.'
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the dashboard. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class DashboardsDashboardIdPutRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    dashboardDefinition: constr(pattern=r'.+', min_length=0, max_length=204800) = Field(
        ...,
        description='The new dashboard definition, as specified in a JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.',
    )
    dashboardDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A new description for the dashboard.')
    dashboardName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A new friendly name for the dashboard.')


class Filter6(Enum):
    ALL = 'ALL'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    COMPLETED_WITH_FAILURES = 'COMPLETED_WITH_FAILURES'
    COMPLETED = 'COMPLETED'


class ErrorReportLocation1(BaseModel):
    bucket: Optional[Bucket] = None
    prefix: Optional[String] = None


class JobConfiguration1(BaseModel):
    fileFormat: Optional[FileFormat] = None


class LoggingOptions1(BaseModel):
    level: Optional[LoggingLevel] = None


class LoggingPutRequest(BaseModel):
    loggingOptions: LoggingOptions1 = Field(
        ..., description='Contains logging options.'
    )


class Alarms1(BaseModel):
    alarmRoleArn: Optional[ARN] = None
    notificationLambdaArn: Optional[ARN] = None


class PortalAuthMode(Enum):
    IAM = 'IAM'
    SSO = 'SSO'


class PortalLogoImageFile(BaseModel):
    data: Optional[ImageFileData] = None
    type: Optional[ImageFileType] = None


class PortalsPostRequest(BaseModel):
    alarms: Optional[Alarms1] = Field(
        None,
        description='Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    notificationSenderEmail: Optional[
        constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255)
    ] = Field(
        None,
        description='<p>The email address that sends alarm notifications.</p> <important> <p>If you use the <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html">IoT Events managed Lambda function</a> to manage your emails, you must <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">verify the sender email address in Amazon SES</a>.</p> </important>',
    )
    portalAuthMode: Optional[PortalAuthMode] = Field(
        None,
        description='<p>The service to use to authenticate users to the portal. Choose from the following options:</p> <ul> <li> <p> <code>SSO</code> – The portal uses IAM Identity Center (successor to Single Sign-On) to authenticate users and manage user permissions. Before you can create a portal that uses IAM Identity Center, you must enable IAM Identity Center. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-get-started.html#mon-gs-sso">Enabling IAM Identity Center</a> in the <i>IoT SiteWise User Guide</i>. This option is only available in Amazon Web Services Regions other than the China Regions.</p> </li> <li> <p> <code>IAM</code> – The portal uses Identity and Access Management to authenticate users and manage user permissions.</p> </li> </ul> <p>You can\'t change this value after you create a portal.</p> <p>Default: <code>SSO</code> </p>',
    )
    portalContactEmail: constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255) = (
        Field(
            ...,
            description="The Amazon Web Services administrator's contact email address.",
        )
    )
    portalDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the portal.')
    portalLogoImageFile: Optional[PortalLogoImageFile] = Field(
        None, description='Contains an image file.'
    )
    portalName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A friendly name for the portal.')
    roleArn: constr(pattern=r'.*', min_length=1, max_length=1600) = Field(
        ...,
        description='The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal\'s users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the portal. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class ProjectsPostRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    portalId: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
        min_length=36,
        max_length=36,
    ) = Field(..., description='The ID of the portal in which to create the project.')
    projectDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the project.')
    projectName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A friendly name for the project.')
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the project. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class ProjectsProjectIdPutRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    projectDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A new description for the project.')
    projectName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A new friendly name for the project.')


class ProjectsProjectIdAssetsAssociatePostRequest(BaseModel):
    assetIds: List[ID] = Field(
        ...,
        description='The IDs of the assets to be associated to the project.',
        max_length=100,
        min_length=1,
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class ProjectsProjectIdAssetsDisassociatePostRequest(BaseModel):
    assetIds: List[ID] = Field(
        ...,
        description='The IDs of the assets to be disassociated from the project.',
        max_length=100,
        min_length=1,
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class Qualities(RootModel[List[Quality]]):
    root: List[Quality] = Field(..., max_length=1, min_length=1)


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description='A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TimeSeriesType(Enum):
    ASSOCIATED = 'ASSOCIATED'
    DISASSOCIATED = 'DISASSOCIATED'


class TimeseriesAssociateAliasAssetIdPropertyIdPostRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class TimeseriesDeletePostRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class TimeseriesDisassociateAliasAssetIdPropertyIdPostRequest(BaseModel):
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class AggregatedValue(BaseModel):
    quality: Optional[Quality] = None
    timestamp: Timestamp
    value: Aggregates


class AggregatedValues(RootModel[List[AggregatedValue]]):
    root: List[AggregatedValue]


class AssetCompositeModel(BaseModel):
    description: Optional[Description] = None
    id: Optional[ID] = None
    name: Name
    properties: Any = Field(
        ..., description='The asset properties that this composite model defines.'
    )
    type: Name


class AssetCompositeModels(RootModel[List[AssetCompositeModel]]):
    root: List[AssetCompositeModel]


class AssetErrorDetails(BaseModel):
    assetId: ID
    code: AssetErrorCode
    message: AssetErrorMessage


class AssetHierarchy(BaseModel):
    id: Optional[ID] = None
    name: Name


class AssetHierarchyInfo(BaseModel):
    childAssetId: Optional[ID] = None
    parentAssetId: Optional[ID] = None


class AssetIDs(RootModel[List[ID]]):
    root: List[ID]


class AssetModelCompositeModel(BaseModel):
    description: Optional[Description] = None
    id: Optional[ID] = None
    name: Name
    properties: Optional[Any] = Field(
        None, description='The asset property definitions for this composite model.'
    )
    type: Name


class AssetModelCompositeModelDefinition(BaseModel):
    description: Optional[Description] = None
    name: Name
    properties: Optional[Any] = Field(
        None, description='The asset property definitions for this composite model.'
    )
    type: Name


class AssetModelCompositeModelDefinitions(
    RootModel[List[AssetModelCompositeModelDefinition]]
):
    root: List[AssetModelCompositeModelDefinition]


class AssetModelCompositeModels(RootModel[List[AssetModelCompositeModel]]):
    root: List[AssetModelCompositeModel]


class AssetModelHierarchy(BaseModel):
    childAssetModelId: ID
    id: Optional[ID] = None
    name: Name


class AssetModelHierarchyDefinition(BaseModel):
    childAssetModelId: ID
    name: Name


class AssetModelHierarchyDefinitions(RootModel[List[AssetModelHierarchyDefinition]]):
    root: List[AssetModelHierarchyDefinition]


class AssetRelationshipSummary(BaseModel):
    hierarchyInfo: Optional[AssetHierarchyInfo] = None
    relationshipType: AssetRelationshipType


class AssociateAssetsRequest(BaseModel):
    childAssetId: ID
    clientToken: Optional[ClientToken] = None
    hierarchyId: ID


class AssociateTimeSeriesToAssetPropertyRequest(BaseModel):
    clientToken: Optional[ClientToken] = None


class Attribute(BaseModel):
    defaultValue: Optional[DefaultValue] = None


class BatchAssociateProjectAssetsErrors(RootModel[List[AssetErrorDetails]]):
    root: List[AssetErrorDetails]


class BatchAssociateProjectAssetsRequest(BaseModel):
    assetIds: IDs
    clientToken: Optional[ClientToken] = None


class BatchAssociateProjectAssetsResponse(BaseModel):
    errors: Optional[BatchAssociateProjectAssetsErrors] = None


class BatchDisassociateProjectAssetsErrors(RootModel[List[AssetErrorDetails]]):
    root: List[AssetErrorDetails]


class BatchDisassociateProjectAssetsRequest(BaseModel):
    assetIds: IDs
    clientToken: Optional[ClientToken] = None


class BatchDisassociateProjectAssetsResponse(BaseModel):
    errors: Optional[BatchDisassociateProjectAssetsErrors] = None


class BatchGetAssetPropertyAggregatesErrorEntry(BaseModel):
    entryId: EntryId
    errorCode: BatchGetAssetPropertyAggregatesErrorCode
    errorMessage: ErrorMessage


class BatchGetAssetPropertyAggregatesErrorInfo(BaseModel):
    errorCode: BatchGetAssetPropertyAggregatesErrorCode
    errorTimestamp: Timestamp


class BatchGetAssetPropertyAggregatesSkippedEntry(BaseModel):
    completionStatus: BatchEntryCompletionStatus
    entryId: EntryId
    errorInfo: Optional[BatchGetAssetPropertyAggregatesErrorInfo] = None


class BatchGetAssetPropertyAggregatesSuccessEntry(BaseModel):
    aggregatedValues: AggregatedValues
    entryId: EntryId


class BatchGetAssetPropertyValueEntry(BaseModel):
    assetId: Optional[ID] = None
    entryId: EntryId
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyId: Optional[ID] = None


class BatchGetAssetPropertyValueErrorEntry(BaseModel):
    entryId: EntryId
    errorCode: BatchGetAssetPropertyValueErrorCode
    errorMessage: ErrorMessage


class BatchGetAssetPropertyValueErrorInfo(BaseModel):
    errorCode: BatchGetAssetPropertyValueErrorCode
    errorTimestamp: Timestamp


class BatchGetAssetPropertyValueHistoryErrorEntry(BaseModel):
    entryId: EntryId
    errorCode: BatchGetAssetPropertyValueHistoryErrorCode
    errorMessage: ErrorMessage


class BatchGetAssetPropertyValueHistoryErrorInfo(BaseModel):
    errorCode: BatchGetAssetPropertyValueHistoryErrorCode
    errorTimestamp: Timestamp


class BatchGetAssetPropertyValueHistorySkippedEntry(BaseModel):
    completionStatus: BatchEntryCompletionStatus
    entryId: EntryId
    errorInfo: Optional[BatchGetAssetPropertyValueHistoryErrorInfo] = None


class BatchGetAssetPropertyValueSkippedEntry(BaseModel):
    completionStatus: BatchEntryCompletionStatus
    entryId: EntryId
    errorInfo: Optional[BatchGetAssetPropertyValueErrorInfo] = None


class ConfigurationErrorDetails(BaseModel):
    code: ErrorCode
    message: ErrorMessage


class ConfigurationStatus(BaseModel):
    error: Optional[ConfigurationErrorDetails] = None
    state: ConfigurationState


class CreateAccessPolicyResponse(BaseModel):
    accessPolicyArn: ARN
    accessPolicyId: ID


class CreateBulkImportJobResponse(BaseModel):
    jobId: ID
    jobName: Name
    jobStatus: JobStatus


class CreateDashboardResponse(BaseModel):
    dashboardArn: ARN
    dashboardId: ID


class CreateGatewayResponse(BaseModel):
    gatewayArn: ARN
    gatewayId: ID


class CreateProjectResponse(BaseModel):
    projectArn: ARN
    projectId: ID


class DashboardSummary(BaseModel):
    creationDate: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: ID
    lastUpdateDate: Optional[Timestamp] = None
    name: Name


class DescribeDashboardResponse(BaseModel):
    dashboardArn: ARN
    dashboardCreationDate: Timestamp
    dashboardDefinition: DashboardDefinition
    dashboardDescription: Optional[Description] = None
    dashboardId: ID
    dashboardLastUpdateDate: Timestamp
    dashboardName: Name
    projectId: ID


class DescribeDefaultEncryptionConfigurationResponse(BaseModel):
    configurationStatus: ConfigurationStatus
    encryptionType: EncryptionType
    kmsKeyArn: Optional[ARN] = None


class DescribeGatewayCapabilityConfigurationResponse(BaseModel):
    capabilityConfiguration: CapabilityConfiguration
    capabilityNamespace: CapabilityNamespace
    capabilitySyncStatus: CapabilitySyncStatus
    gatewayId: ID


class DescribeLoggingOptionsResponse(BaseModel):
    loggingOptions: LoggingOptions


class DescribeProjectResponse(BaseModel):
    portalId: ID
    projectArn: ARN
    projectCreationDate: Timestamp
    projectDescription: Optional[Description] = None
    projectId: ID
    projectLastUpdateDate: Timestamp
    projectName: Name


class DescribeTimeSeriesResponse(BaseModel):
    alias: Optional[PropertyAlias] = None
    assetId: Optional[ID] = None
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    propertyId: Optional[ID] = None
    timeSeriesArn: ARN
    timeSeriesCreationDate: Timestamp
    timeSeriesId: TimeSeriesId
    timeSeriesLastUpdateDate: Timestamp


class DetailedError(BaseModel):
    code: DetailedErrorCode
    message: DetailedErrorMessage


class DetailedErrors(RootModel[List[DetailedError]]):
    root: List[DetailedError]


class DisassociateAssetsRequest(BaseModel):
    childAssetId: ID
    clientToken: Optional[ClientToken] = None
    hierarchyId: ID


class ErrorDetails(BaseModel):
    code: ErrorCode
    details: Optional[DetailedErrors] = None
    message: ErrorMessage


class ErrorReportLocation(BaseModel):
    bucket: Bucket
    prefix: String


class ExpressionVariable(BaseModel):
    name: VariableName
    value: VariableValue


class ExpressionVariables(RootModel[List[ExpressionVariable]]):
    root: List[ExpressionVariable]


class File(BaseModel):
    bucket: Bucket
    key: String
    versionId: Optional[String] = None


class Files(RootModel[List[File]]):
    root: List[File]


class ForwardingConfig(BaseModel):
    state: ForwardingConfigState


class GatewayCapabilitySummaries(RootModel[List[GatewayCapabilitySummary]]):
    root: List[GatewayCapabilitySummary]


class GatewaySummary(BaseModel):
    creationDate: Timestamp
    gatewayCapabilitySummaries: Optional[GatewayCapabilitySummaries] = None
    gatewayId: ID
    gatewayName: Name
    gatewayPlatform: Optional[GatewayPlatform] = None
    lastUpdateDate: Timestamp


class GetAssetPropertyAggregatesResponse(BaseModel):
    aggregatedValues: AggregatedValues
    nextToken: Optional[NextToken] = None


class GroupIdentity(BaseModel):
    id: IdentityId


class Identity(BaseModel):
    group: Optional[GroupIdentity] = None
    iamRole: Optional[IAMRoleIdentity] = None
    iamUser: Optional[IAMUserIdentity] = None
    user: Optional[UserIdentity] = None


class ImageFile(BaseModel):
    data: ImageFileData
    type: ImageFileType


class ImageLocation(BaseModel):
    id: ID
    url: Url


class JobSummary(BaseModel):
    id: ID
    name: Name
    status: JobStatus


class ListProjectAssetsResponse(BaseModel):
    assetIds: AssetIDs
    nextToken: Optional[NextToken] = None


class MeasurementProcessingConfig(BaseModel):
    forwardingConfig: ForwardingConfig


class MetricWindow(BaseModel):
    tumbling: Optional[TumblingWindow] = None


class MonitorErrorDetails(BaseModel):
    code: Optional[MonitorErrorCode] = None
    message: Optional[MonitorErrorMessage] = None


class PortalStatus(BaseModel):
    error: Optional[MonitorErrorDetails] = None
    state: PortalState


class PortalSummary(BaseModel):
    creationDate: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: ID
    lastUpdateDate: Optional[Timestamp] = None
    name: Name
    roleArn: Optional[ARN] = None
    startUrl: Url
    status: PortalStatus


class ProjectSummary(BaseModel):
    creationDate: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: ID
    lastUpdateDate: Optional[Timestamp] = None
    name: Name


class PropertyNotification(BaseModel):
    state: PropertyNotificationState
    topic: PropertyNotificationTopic


class PutDefaultEncryptionConfigurationResponse(BaseModel):
    configurationStatus: ConfigurationStatus
    encryptionType: EncryptionType
    kmsKeyArn: Optional[ARN] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class TimeInNanos(BaseModel):
    offsetInNanos: Optional[OffsetInNanos] = None
    timeInSeconds: TimeInSeconds


class TimeSeriesSummary(BaseModel):
    alias: Optional[PropertyAlias] = None
    assetId: Optional[ID] = None
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    propertyId: Optional[ID] = None
    timeSeriesArn: ARN
    timeSeriesCreationDate: Timestamp
    timeSeriesId: TimeSeriesId
    timeSeriesLastUpdateDate: Timestamp


class Timestamps(RootModel[List[TimeInNanos]]):
    root: List[TimeInNanos]


class TransformProcessingConfig(BaseModel):
    computeLocation: ComputeLocation
    forwardingConfig: Optional[ForwardingConfig] = None


class UpdateAccessPolicyRequest(BaseModel):
    accessPolicyIdentity: Identity
    accessPolicyPermission: Permission
    accessPolicyResource: Resource
    clientToken: Optional[ClientToken] = None


class UpdatePortalResponse(BaseModel):
    portalStatus: PortalStatus


class AccessPolicyIdentity(BaseModel):
    group: Optional[GroupIdentity] = None
    iamRole: Optional[IAMRoleIdentity] = None
    iamUser: Optional[IAMUserIdentity] = None
    user: Optional[UserIdentity] = None


class AccessPoliciesPostRequest(BaseModel):
    accessPolicyIdentity: AccessPolicyIdentity = Field(
        ...,
        description='<p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can\'t use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href="https://console.aws.amazon.com/singlesignon">IAM Identity Center console</a>.</p> </note>',
    )
    accessPolicyPermission: AccessPolicyPermission = Field(
        ...,
        description='The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.',
    )
    accessPolicyResource: AccessPolicyResource = Field(
        ...,
        description='Contains an IoT SiteWise Monitor resource ID for a portal or project.',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the access policy. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class AccessPoliciesAccessPolicyIdPutRequest(BaseModel):
    accessPolicyIdentity: AccessPolicyIdentity = Field(
        ...,
        description='<p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can\'t use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href="https://console.aws.amazon.com/singlesignon">IAM Identity Center console</a>.</p> </note>',
    )
    accessPolicyPermission: AccessPolicyPermission = Field(
        ...,
        description='The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.',
    )
    accessPolicyResource: AccessPolicyResource = Field(
        ...,
        description='Contains an IoT SiteWise Monitor resource ID for a portal or project.',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class JobsPostRequest(BaseModel):
    errorReportLocation: ErrorReportLocation1 = Field(
        ...,
        description='The Amazon S3 destination where errors associated with the job creation request are saved.',
    )
    files: List[File] = Field(
        ...,
        description='The files in the specified Amazon S3 bucket that contain your data.',
    )
    jobConfiguration: JobConfiguration1 = Field(
        ...,
        description='Contains the configuration information of a job, such as the file format used to save data in Amazon S3.',
    )
    jobName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='The unique name that helps identify the job request.')
    jobRoleArn: constr(pattern=r'.*', min_length=1, max_length=1600) = Field(
        ...,
        description='The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IAM role that allows IoT SiteWise to read Amazon S3 data.',
    )


class PortalLogoImage(BaseModel):
    file: Optional[ImageFile] = None
    id: Optional[ID] = None


class PortalsPortalIdPutRequest(BaseModel):
    alarms: Optional[Alarms1] = Field(
        None,
        description='Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    notificationSenderEmail: Optional[
        constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255)
    ] = Field(None, description='The email address that sends alarm notifications.')
    portalContactEmail: constr(pattern=r'[^@]+@[^@]+', min_length=1, max_length=255) = (
        Field(
            ...,
            description="The Amazon Web Services administrator's contact email address.",
        )
    )
    portalDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A new description for the portal.')
    portalLogoImage: Optional[PortalLogoImage] = Field(
        None,
        description='<p>Contains an image that is one of the following:</p> <ul> <li> <p>An image file. Choose this option to upload a new image.</p> </li> <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li> </ul>',
    )
    portalName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A new friendly name for the portal.')
    roleArn: constr(pattern=r'.*', min_length=1, max_length=1600) = Field(
        ...,
        description='The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal\'s users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class PropertiesBatchLatestPostRequest(BaseModel):
    entries: List[BatchGetAssetPropertyValueEntry] = Field(
        ...,
        description='The list of asset property value entries for the batch get request. You can specify up to 128 entries per request.',
    )
    nextToken: Optional[
        constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=4096)
    ] = Field(
        None, description='The token to be used for the next set of paginated results.'
    )


class AccessPolicySummary(BaseModel):
    creationDate: Optional[Timestamp] = None
    id: ID
    identity: Identity
    lastUpdateDate: Optional[Timestamp] = None
    permission: Permission
    resource: Resource


class AssetHierarchies(RootModel[List[AssetHierarchy]]):
    root: List[AssetHierarchy]


class AssetModelHierarchies(RootModel[List[AssetModelHierarchy]]):
    root: List[AssetModelHierarchy]


class AssetModelStatus(BaseModel):
    error: Optional[ErrorDetails] = None
    state: AssetModelState


class AssetModelSummary(BaseModel):
    arn: ARN
    creationDate: Timestamp
    description: Description
    id: ID
    lastUpdateDate: Timestamp
    name: Name
    status: AssetModelStatus


class AssetProperty(BaseModel):
    alias: Optional[PropertyAlias] = None
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    id: ID
    name: Name
    notification: Optional[PropertyNotification] = None
    unit: Optional[PropertyUnit] = None


class AssetPropertySummary(BaseModel):
    alias: Optional[PropertyAlias] = None
    assetCompositeModelId: Optional[ID] = None
    id: Optional[ID] = None
    notification: Optional[PropertyNotification] = None
    unit: Optional[PropertyUnit] = None


class AssetPropertyValue(BaseModel):
    quality: Optional[Quality] = None
    timestamp: TimeInNanos
    value: Variant


class AssetPropertyValueHistory(RootModel[List[AssetPropertyValue]]):
    root: List[AssetPropertyValue]


class AssetPropertyValues(RootModel[List[AssetPropertyValue]]):
    root: List[AssetPropertyValue]


class AssetRelationshipSummaries(RootModel[List[AssetRelationshipSummary]]):
    root: List[AssetRelationshipSummary]


class AssetStatus(BaseModel):
    error: Optional[ErrorDetails] = None
    state: AssetState


class AssetSummary(BaseModel):
    arn: ARN
    assetModelId: ID
    creationDate: Timestamp
    description: Optional[Description] = None
    hierarchies: AssetHierarchies
    id: ID
    lastUpdateDate: Timestamp
    name: Name
    status: AssetStatus


class AssociatedAssetsSummary(BaseModel):
    arn: ARN
    assetModelId: ID
    creationDate: Timestamp
    description: Optional[Description] = None
    hierarchies: AssetHierarchies
    id: ID
    lastUpdateDate: Timestamp
    name: Name
    status: AssetStatus


class BatchGetAssetPropertyAggregatesEntry(BaseModel):
    aggregateTypes: AggregateTypes
    assetId: Optional[ID] = None
    endDate: Timestamp
    entryId: EntryId
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyId: Optional[ID] = None
    qualities: Optional[Qualities] = None
    resolution: Resolution
    startDate: Timestamp
    timeOrdering: Optional[TimeOrdering] = None


class BatchGetAssetPropertyAggregatesErrorEntries(
    RootModel[List[BatchGetAssetPropertyAggregatesErrorEntry]]
):
    root: List[BatchGetAssetPropertyAggregatesErrorEntry]


class BatchGetAssetPropertyAggregatesSkippedEntries(
    RootModel[List[BatchGetAssetPropertyAggregatesSkippedEntry]]
):
    root: List[BatchGetAssetPropertyAggregatesSkippedEntry]


class BatchGetAssetPropertyAggregatesSuccessEntries(
    RootModel[List[BatchGetAssetPropertyAggregatesSuccessEntry]]
):
    root: List[BatchGetAssetPropertyAggregatesSuccessEntry]


class BatchGetAssetPropertyValueEntries(
    RootModel[List[BatchGetAssetPropertyValueEntry]]
):
    root: List[BatchGetAssetPropertyValueEntry]


class BatchGetAssetPropertyValueErrorEntries(
    RootModel[List[BatchGetAssetPropertyValueErrorEntry]]
):
    root: List[BatchGetAssetPropertyValueErrorEntry]


class BatchGetAssetPropertyValueHistoryEntry(BaseModel):
    assetId: Optional[ID] = None
    endDate: Optional[Timestamp] = None
    entryId: EntryId
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyId: Optional[ID] = None
    qualities: Optional[Qualities] = None
    startDate: Optional[Timestamp] = None
    timeOrdering: Optional[TimeOrdering] = None


class BatchGetAssetPropertyValueHistoryErrorEntries(
    RootModel[List[BatchGetAssetPropertyValueHistoryErrorEntry]]
):
    root: List[BatchGetAssetPropertyValueHistoryErrorEntry]


class BatchGetAssetPropertyValueHistorySkippedEntries(
    RootModel[List[BatchGetAssetPropertyValueHistorySkippedEntry]]
):
    root: List[BatchGetAssetPropertyValueHistorySkippedEntry]


class BatchGetAssetPropertyValueHistorySuccessEntry(BaseModel):
    assetPropertyValueHistory: AssetPropertyValueHistory
    entryId: EntryId


class BatchGetAssetPropertyValueRequest(BaseModel):
    entries: BatchGetAssetPropertyValueEntries
    nextToken: Optional[NextToken] = None


class BatchGetAssetPropertyValueSkippedEntries(
    RootModel[List[BatchGetAssetPropertyValueSkippedEntry]]
):
    root: List[BatchGetAssetPropertyValueSkippedEntry]


class BatchGetAssetPropertyValueSuccessEntry(BaseModel):
    assetPropertyValue: Optional[AssetPropertyValue] = None
    entryId: EntryId


class BatchPutAssetPropertyError(BaseModel):
    errorCode: BatchPutAssetPropertyValueErrorCode
    errorMessage: ErrorMessage
    timestamps: Timestamps


class BatchPutAssetPropertyErrors(RootModel[List[BatchPutAssetPropertyError]]):
    root: List[BatchPutAssetPropertyError]


class CreateAccessPolicyRequest(BaseModel):
    accessPolicyIdentity: Identity
    accessPolicyPermission: Permission
    accessPolicyResource: Resource
    clientToken: Optional[ClientToken] = None
    tags: Optional[TagMap] = None


class CreateAssetModelResponse(BaseModel):
    assetModelArn: ARN
    assetModelId: ID
    assetModelStatus: AssetModelStatus


class CreateAssetRequest(BaseModel):
    assetDescription: Optional[Description] = None
    assetModelId: ID
    assetName: Name
    clientToken: Optional[ClientToken] = None
    tags: Optional[TagMap] = None


class CreateAssetResponse(BaseModel):
    assetArn: ARN
    assetId: ID
    assetStatus: AssetStatus


class CreateBulkImportJobRequest(BaseModel):
    errorReportLocation: ErrorReportLocation
    files: Files
    jobConfiguration: JobConfiguration
    jobName: Name
    jobRoleArn: ARN


class CreateDashboardRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    dashboardDefinition: DashboardDefinition
    dashboardDescription: Optional[Description] = None
    dashboardName: Name
    projectId: ID
    tags: Optional[TagMap] = None


class CreateGatewayRequest(BaseModel):
    gatewayName: Name
    gatewayPlatform: GatewayPlatform
    tags: Optional[TagMap] = None


class CreatePortalRequest(BaseModel):
    alarms: Optional[Alarms] = None
    clientToken: Optional[ClientToken] = None
    notificationSenderEmail: Optional[Email] = None
    portalAuthMode: Optional[AuthMode] = None
    portalContactEmail: Email
    portalDescription: Optional[Description] = None
    portalLogoImageFile: Optional[ImageFile] = None
    portalName: Name
    roleArn: ARN
    tags: Optional[TagMap] = None


class CreatePortalResponse(BaseModel):
    portalArn: ARN
    portalId: ID
    portalStartUrl: Url
    portalStatus: PortalStatus
    ssoApplicationId: SSOApplicationId


class CreateProjectRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    portalId: ID
    projectDescription: Optional[Description] = None
    projectName: Name
    tags: Optional[TagMap] = None


class DashboardSummaries(RootModel[List[DashboardSummary]]):
    root: List[DashboardSummary]


class DeleteAssetModelResponse(BaseModel):
    assetModelStatus: AssetModelStatus


class DeleteAssetResponse(BaseModel):
    assetStatus: AssetStatus


class DeletePortalResponse(BaseModel):
    portalStatus: PortalStatus


class DescribeAccessPolicyResponse(BaseModel):
    accessPolicyArn: ARN
    accessPolicyCreationDate: Timestamp
    accessPolicyId: ID
    accessPolicyIdentity: Identity
    accessPolicyLastUpdateDate: Timestamp
    accessPolicyPermission: Permission
    accessPolicyResource: Resource


class DescribeBulkImportJobResponse(BaseModel):
    errorReportLocation: ErrorReportLocation
    files: Files
    jobConfiguration: JobConfiguration
    jobCreationDate: Timestamp
    jobId: ID
    jobLastUpdateDate: Timestamp
    jobName: Name
    jobRoleArn: ARN
    jobStatus: JobStatus


class DescribeGatewayResponse(BaseModel):
    creationDate: Timestamp
    gatewayArn: ARN
    gatewayCapabilitySummaries: GatewayCapabilitySummaries
    gatewayId: ID
    gatewayName: Name
    gatewayPlatform: Optional[GatewayPlatform] = None
    lastUpdateDate: Timestamp


class DescribePortalResponse(BaseModel):
    alarms: Optional[Alarms] = None
    notificationSenderEmail: Optional[Email] = None
    portalArn: ARN
    portalAuthMode: Optional[AuthMode] = None
    portalClientId: PortalClientId
    portalContactEmail: Email
    portalCreationDate: Timestamp
    portalDescription: Optional[Description] = None
    portalId: ID
    portalLastUpdateDate: Timestamp
    portalLogoImageLocation: Optional[ImageLocation] = None
    portalName: Name
    portalStartUrl: Url
    portalStatus: PortalStatus
    roleArn: Optional[ARN] = None


class DescribeStorageConfigurationResponse(BaseModel):
    configurationStatus: ConfigurationStatus
    disassociatedDataStorage: Optional[DisassociatedDataStorageState] = None
    lastUpdateDate: Optional[Timestamp] = None
    multiLayerStorage: Optional[MultiLayerStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    storageType: StorageType


class GatewaySummaries(RootModel[List[GatewaySummary]]):
    root: List[GatewaySummary]


class GetAssetPropertyValueHistoryResponse(BaseModel):
    assetPropertyValueHistory: AssetPropertyValueHistory
    nextToken: Optional[NextToken] = None


class GetAssetPropertyValueResponse(BaseModel):
    propertyValue: Optional[AssetPropertyValue] = None


class Image(BaseModel):
    file: Optional[ImageFile] = None
    id: Optional[ID] = None


class InterpolatedAssetPropertyValue(BaseModel):
    timestamp: TimeInNanos
    value: Variant


class InterpolatedAssetPropertyValues(RootModel[List[InterpolatedAssetPropertyValue]]):
    root: List[InterpolatedAssetPropertyValue]


class JobSummaries(RootModel[List[JobSummary]]):
    root: List[JobSummary]


class ListAssetRelationshipsResponse(BaseModel):
    assetRelationshipSummaries: AssetRelationshipSummaries
    nextToken: Optional[NextToken] = None


class ListBulkImportJobsResponse(BaseModel):
    jobSummaries: JobSummaries
    nextToken: Optional[NextToken] = None


class ListDashboardsResponse(BaseModel):
    dashboardSummaries: DashboardSummaries
    nextToken: Optional[NextToken] = None


class ListGatewaysResponse(BaseModel):
    gatewaySummaries: GatewaySummaries
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class Measurement(BaseModel):
    processingConfig: Optional[MeasurementProcessingConfig] = None


class Metric(BaseModel):
    expression: Expression
    processingConfig: Optional[MetricProcessingConfig] = None
    variables: ExpressionVariables
    window: MetricWindow


class PortalSummaries(RootModel[List[PortalSummary]]):
    root: List[PortalSummary]


class ProjectSummaries(RootModel[List[ProjectSummary]]):
    root: List[ProjectSummary]


class PutAssetPropertyValueEntry(BaseModel):
    assetId: Optional[ID] = None
    entryId: EntryId
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyId: Optional[ID] = None
    propertyValues: AssetPropertyValues


class PutStorageConfigurationRequest(BaseModel):
    disassociatedDataStorage: Optional[DisassociatedDataStorageState] = None
    multiLayerStorage: Optional[MultiLayerStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    storageType: StorageType


class PutStorageConfigurationResponse(BaseModel):
    configurationStatus: ConfigurationStatus
    disassociatedDataStorage: Optional[DisassociatedDataStorageState] = None
    multiLayerStorage: Optional[MultiLayerStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    storageType: StorageType


class TimeSeriesSummaries(RootModel[List[TimeSeriesSummary]]):
    root: List[TimeSeriesSummary]


class Transform(BaseModel):
    expression: Expression
    processingConfig: Optional[TransformProcessingConfig] = None
    variables: ExpressionVariables


class UpdateAssetModelResponse(BaseModel):
    assetModelStatus: AssetModelStatus


class UpdateAssetResponse(BaseModel):
    assetStatus: AssetStatus


class UpdatePortalRequest(BaseModel):
    alarms: Optional[Alarms] = None
    clientToken: Optional[ClientToken] = None
    notificationSenderEmail: Optional[Email] = None
    portalContactEmail: Email
    portalDescription: Optional[Description] = None
    portalLogoImage: Optional[Image] = None
    portalName: Name
    roleArn: ARN


class PropertiesPostRequest(BaseModel):
    entries: List[PutAssetPropertyValueEntry] = Field(
        ...,
        description='The list of asset property value entries for the batch put request. You can specify up to 10 entries per request.',
    )


class PropertiesBatchAggregatesPostRequest(BaseModel):
    entries: List[BatchGetAssetPropertyAggregatesEntry] = Field(
        ...,
        description='The list of asset property aggregate entries for the batch get request. You can specify up to 16 entries per request.',
    )
    maxResults: Optional[conint(ge=1)] = Field(
        None,
        description='<p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p> <ul> <li> <p>The size of the result set is less than 1 MB.</p> </li> <li> <p>The number of data points in the result set is less than the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li> </ul>',
    )
    nextToken: Optional[
        constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=4096)
    ] = Field(
        None, description='The token to be used for the next set of paginated results.'
    )


class PropertiesBatchHistoryPostRequest(BaseModel):
    entries: List[BatchGetAssetPropertyValueHistoryEntry] = Field(
        ...,
        description='The list of asset property historical value entries for the batch get request. You can specify up to 16 entries per request.',
    )
    maxResults: Optional[conint(ge=1)] = Field(
        None,
        description='<p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p> <ul> <li> <p>The size of the result set is less than 1 MB.</p> </li> <li> <p>The number of data points in the result set is less than the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li> </ul>',
    )
    nextToken: Optional[
        constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=4096)
    ] = Field(
        None, description='The token to be used for the next set of paginated results.'
    )


class AccessPolicySummaries(RootModel[List[AccessPolicySummary]]):
    root: List[AccessPolicySummary]


class AssetModelSummaries(RootModel[List[AssetModelSummary]]):
    root: List[AssetModelSummary]


class AssetProperties(RootModel[List[AssetProperty]]):
    root: List[AssetProperty]


class AssetPropertySummaries(RootModel[List[AssetPropertySummary]]):
    root: List[AssetPropertySummary]


class AssetSummaries(RootModel[List[AssetSummary]]):
    root: List[AssetSummary]


class AssociatedAssetsSummaries(RootModel[List[AssociatedAssetsSummary]]):
    root: List[AssociatedAssetsSummary]


class BatchGetAssetPropertyAggregatesEntries(
    RootModel[List[BatchGetAssetPropertyAggregatesEntry]]
):
    root: List[BatchGetAssetPropertyAggregatesEntry]


class BatchGetAssetPropertyAggregatesRequest(BaseModel):
    entries: BatchGetAssetPropertyAggregatesEntries
    maxResults: Optional[BatchGetAssetPropertyAggregatesMaxResults] = None
    nextToken: Optional[NextToken] = None


class BatchGetAssetPropertyAggregatesResponse(BaseModel):
    errorEntries: BatchGetAssetPropertyAggregatesErrorEntries
    nextToken: Optional[NextToken] = None
    skippedEntries: BatchGetAssetPropertyAggregatesSkippedEntries
    successEntries: BatchGetAssetPropertyAggregatesSuccessEntries


class BatchGetAssetPropertyValueHistoryEntries(
    RootModel[List[BatchGetAssetPropertyValueHistoryEntry]]
):
    root: List[BatchGetAssetPropertyValueHistoryEntry]


class BatchGetAssetPropertyValueHistoryRequest(BaseModel):
    entries: BatchGetAssetPropertyValueHistoryEntries
    maxResults: Optional[BatchGetAssetPropertyValueHistoryMaxResults] = None
    nextToken: Optional[NextToken] = None


class BatchGetAssetPropertyValueHistorySuccessEntries(
    RootModel[List[BatchGetAssetPropertyValueHistorySuccessEntry]]
):
    root: List[BatchGetAssetPropertyValueHistorySuccessEntry]


class BatchGetAssetPropertyValueSuccessEntries(
    RootModel[List[BatchGetAssetPropertyValueSuccessEntry]]
):
    root: List[BatchGetAssetPropertyValueSuccessEntry]


class BatchPutAssetPropertyErrorEntry(BaseModel):
    entryId: EntryId
    errors: BatchPutAssetPropertyErrors


class DescribeAssetResponse(BaseModel):
    assetArn: ARN
    assetCompositeModels: Optional[AssetCompositeModels] = None
    assetCreationDate: Timestamp
    assetDescription: Optional[Description] = None
    assetHierarchies: AssetHierarchies
    assetId: ID
    assetLastUpdateDate: Timestamp
    assetModelId: ID
    assetName: Name
    assetProperties: AssetProperties
    assetStatus: AssetStatus


class GetInterpolatedAssetPropertyValuesResponse(BaseModel):
    interpolatedAssetPropertyValues: InterpolatedAssetPropertyValues
    nextToken: Optional[NextToken] = None


class ListAccessPoliciesResponse(BaseModel):
    accessPolicySummaries: AccessPolicySummaries
    nextToken: Optional[NextToken] = None


class ListAssetModelsResponse(BaseModel):
    assetModelSummaries: AssetModelSummaries
    nextToken: Optional[NextToken] = None


class ListAssetPropertiesResponse(BaseModel):
    assetPropertySummaries: AssetPropertySummaries
    nextToken: Optional[NextToken] = None


class ListAssetsResponse(BaseModel):
    assetSummaries: AssetSummaries
    nextToken: Optional[NextToken] = None


class ListAssociatedAssetsResponse(BaseModel):
    assetSummaries: AssociatedAssetsSummaries
    nextToken: Optional[NextToken] = None


class ListPortalsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    portalSummaries: Optional[PortalSummaries] = None


class ListProjectsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    projectSummaries: ProjectSummaries


class ListTimeSeriesResponse(BaseModel):
    TimeSeriesSummaries_1: TimeSeriesSummaries = Field(..., alias='TimeSeriesSummaries')
    nextToken: Optional[NextToken] = None


class PropertyType(BaseModel):
    attribute: Optional[Attribute] = None
    measurement: Optional[Measurement] = None
    metric: Optional[Metric] = None
    transform: Optional[Transform] = None


class PutAssetPropertyValueEntries(RootModel[List[PutAssetPropertyValueEntry]]):
    root: List[PutAssetPropertyValueEntry]


class AssetModelProperty(BaseModel):
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    id: Optional[ID] = None
    name: Name
    type: PropertyType
    unit: Optional[PropertyUnit] = None


class AssetModelPropertyDefinition(BaseModel):
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    name: Name
    type: PropertyType
    unit: Optional[PropertyUnit] = None


class AssetModelPropertyDefinitions(RootModel[List[AssetModelPropertyDefinition]]):
    root: List[AssetModelPropertyDefinition]


class AssetModelPropertySummary(BaseModel):
    assetModelCompositeModelId: Optional[ID] = None
    dataType: PropertyDataType
    dataTypeSpec: Optional[Name] = None
    id: Optional[ID] = None
    name: Name
    type: PropertyType
    unit: Optional[PropertyUnit] = None


class BatchGetAssetPropertyValueHistoryResponse(BaseModel):
    errorEntries: BatchGetAssetPropertyValueHistoryErrorEntries
    nextToken: Optional[NextToken] = None
    skippedEntries: BatchGetAssetPropertyValueHistorySkippedEntries
    successEntries: BatchGetAssetPropertyValueHistorySuccessEntries


class BatchGetAssetPropertyValueResponse(BaseModel):
    errorEntries: BatchGetAssetPropertyValueErrorEntries
    nextToken: Optional[NextToken] = None
    skippedEntries: BatchGetAssetPropertyValueSkippedEntries
    successEntries: BatchGetAssetPropertyValueSuccessEntries


class BatchPutAssetPropertyErrorEntries(
    RootModel[List[BatchPutAssetPropertyErrorEntry]]
):
    root: List[BatchPutAssetPropertyErrorEntry]


class BatchPutAssetPropertyValueRequest(BaseModel):
    entries: PutAssetPropertyValueEntries


class BatchPutAssetPropertyValueResponse(BaseModel):
    errorEntries: BatchPutAssetPropertyErrorEntries


class CreateAssetModelRequest(BaseModel):
    assetModelCompositeModels: Optional[AssetModelCompositeModelDefinitions] = None
    assetModelDescription: Optional[Description] = None
    assetModelHierarchies: Optional[AssetModelHierarchyDefinitions] = None
    assetModelName: Name
    assetModelProperties: Optional[AssetModelPropertyDefinitions] = None
    clientToken: Optional[ClientToken] = None
    tags: Optional[TagMap] = None


class Property(BaseModel):
    alias: Optional[PropertyAlias] = None
    dataType: PropertyDataType
    id: ID
    name: Name
    notification: Optional[PropertyNotification] = None
    type: Optional[PropertyType] = None
    unit: Optional[PropertyUnit] = None


class AssetModelsPostRequest(BaseModel):
    assetModelCompositeModels: Optional[List[AssetModelCompositeModelDefinition]] = (
        Field(
            None,
            description='The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.',
        )
    )
    assetModelDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the asset model.')
    assetModelHierarchies: Optional[List[AssetModelHierarchyDefinition]] = Field(
        None,
        description='<p>The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>',
    )
    assetModelName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A unique, friendly name for the asset model.')
    assetModelProperties: Optional[List[AssetModelPropertyDefinition]] = Field(
        None,
        description='<p>The property definitions of the asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 200 properties per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of key-value pairs that contain metadata for the asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.',
    )


class AssetModelsAssetModelIdPutRequest(BaseModel):
    assetModelCompositeModels: Optional[List[AssetModelCompositeModel]] = Field(
        None,
        description='The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.',
    )
    assetModelDescription: Optional[
        constr(pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=2048)
    ] = Field(None, description='A description for the asset model.')
    assetModelHierarchies: Optional[List[AssetModelHierarchy]] = Field(
        None,
        description='<p>The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>',
    )
    assetModelName: constr(
        pattern=r'[^\u0000-\u001F\u007F]+', min_length=1, max_length=256
    ) = Field(..., description='A unique, friendly name for the asset model.')
    assetModelProperties: Optional[List[AssetModelProperty]] = Field(
        None,
        description='<p>The updated property definitions of the asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 200 properties per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>',
    )
    clientToken: Optional[
        constr(pattern=r'\S{36,64}', min_length=36, max_length=64)
    ] = Field(
        None,
        description="A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.",
    )


class AssetModelProperties(RootModel[List[AssetModelProperty]]):
    root: List[AssetModelProperty]


class AssetModelPropertySummaries(RootModel[List[AssetModelPropertySummary]]):
    root: List[AssetModelPropertySummary]


class CompositeModelProperty(BaseModel):
    assetProperty: Property
    id: Optional[ID] = None
    name: Name
    type: Name


class DescribeAssetModelResponse(BaseModel):
    assetModelArn: ARN
    assetModelCompositeModels: Optional[AssetModelCompositeModels] = None
    assetModelCreationDate: Timestamp
    assetModelDescription: Description
    assetModelHierarchies: AssetModelHierarchies
    assetModelId: ID
    assetModelLastUpdateDate: Timestamp
    assetModelName: Name
    assetModelProperties: AssetModelProperties
    assetModelStatus: AssetModelStatus


class DescribeAssetPropertyResponse(BaseModel):
    assetId: ID
    assetModelId: ID
    assetName: Name
    assetProperty: Optional[Property] = None
    compositeModel: Optional[CompositeModelProperty] = None


class ListAssetModelPropertiesResponse(BaseModel):
    assetModelPropertySummaries: AssetModelPropertySummaries
    nextToken: Optional[NextToken] = None


class UpdateAssetModelRequest(BaseModel):
    assetModelCompositeModels: Optional[AssetModelCompositeModels] = None
    assetModelDescription: Optional[Description] = None
    assetModelHierarchies: Optional[AssetModelHierarchies] = None
    assetModelName: Name
    assetModelProperties: Optional[AssetModelProperties] = None
    clientToken: Optional[ClientToken] = None
